{"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chacha.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chacha.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":4},"end":{"line":4,"column":89}},"4":{"start":{"line":4,"column":71},"end":{"line":4,"column":83}},"5":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"6":{"start":{"line":6,"column":26},"end":{"line":6,"column":33}},"7":{"start":{"line":7,"column":4},"end":{"line":7,"column":17}},"8":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"9":{"start":{"line":10,"column":4},"end":{"line":10,"column":72}},"10":{"start":{"line":12,"column":4},"end":{"line":12,"column":21}},"11":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"12":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"13":{"start":{"line":15,"column":31},"end":{"line":15,"column":42}},"14":{"start":{"line":16,"column":17},"end":{"line":16,"column":19}},"15":{"start":{"line":17,"column":4},"end":{"line":17,"column":131}},"16":{"start":{"line":17,"column":21},"end":{"line":17,"column":131}},"17":{"start":{"line":17,"column":40},"end":{"line":17,"column":131}},"18":{"start":{"line":17,"column":99},"end":{"line":17,"column":131}},"19":{"start":{"line":18,"column":4},"end":{"line":18,"column":36}},"20":{"start":{"line":19,"column":4},"end":{"line":19,"column":18}},"21":{"start":{"line":21,"column":0},"end":{"line":21,"column":62}},"22":{"start":{"line":22,"column":0},"end":{"line":22,"column":55}},"23":{"start":{"line":23,"column":15},"end":{"line":23,"column":46}},"24":{"start":{"line":25,"column":19},"end":{"line":25,"column":61}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":31}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":38}},"27":{"start":{"line":30,"column":21},"end":{"line":30,"column":65}},"28":{"start":{"line":31,"column":4},"end":{"line":31,"column":35}},"29":{"start":{"line":33,"column":0},"end":{"line":33,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":5,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":58},"end":{"line":4,"column":59}},"loc":{"start":{"line":4,"column":69},"end":{"line":4,"column":85}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":6},"end":{"line":5,"column":7}},"loc":{"start":{"line":5,"column":28},"end":{"line":8,"column":1}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":80},"end":{"line":9,"column":81}},"loc":{"start":{"line":9,"column":95},"end":{"line":11,"column":1}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":11,"column":5},"end":{"line":11,"column":6}},"loc":{"start":{"line":11,"column":20},"end":{"line":13,"column":1}},"line":11},"5":{"name":"(anonymous_5)","decl":{"start":{"line":14,"column":50},"end":{"line":14,"column":51}},"loc":{"start":{"line":14,"column":65},"end":{"line":20,"column":1}},"line":14},"6":{"name":"chachaEncrypt","decl":{"start":{"line":24,"column":9},"end":{"line":24,"column":22}},"loc":{"start":{"line":24,"column":38},"end":{"line":27,"column":1}},"line":24},"7":{"name":"chachaDecrypt","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":22}},"loc":{"start":{"line":29,"column":40},"end":{"line":32,"column":1}},"line":29}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":8,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":8,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":8,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":5,"column":1}},{"start":{"line":5,"column":6},"end":{"line":8,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},"type":"if","locations":[{"start":{"line":6,"column":4},"end":{"line":6,"column":33}},{"start":{"line":6,"column":4},"end":{"line":6,"column":33}}],"line":6},"4":{"loc":{"start":{"line":9,"column":25},"end":{"line":13,"column":2}},"type":"binary-expr","locations":[{"start":{"line":9,"column":26},"end":{"line":9,"column":30}},{"start":{"line":9,"column":34},"end":{"line":9,"column":57}},{"start":{"line":9,"column":63},"end":{"line":13,"column":1}}],"line":9},"5":{"loc":{"start":{"line":9,"column":63},"end":{"line":13,"column":1}},"type":"cond-expr","locations":[{"start":{"line":9,"column":80},"end":{"line":11,"column":1}},{"start":{"line":11,"column":5},"end":{"line":13,"column":1}}],"line":9},"6":{"loc":{"start":{"line":14,"column":19},"end":{"line":20,"column":1}},"type":"binary-expr","locations":[{"start":{"line":14,"column":20},"end":{"line":14,"column":24}},{"start":{"line":14,"column":28},"end":{"line":14,"column":45}},{"start":{"line":14,"column":50},"end":{"line":20,"column":1}}],"line":14},"7":{"loc":{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},"type":"if","locations":[{"start":{"line":15,"column":4},"end":{"line":15,"column":42}},{"start":{"line":15,"column":4},"end":{"line":15,"column":42}}],"line":15},"8":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":8},"end":{"line":15,"column":11}},{"start":{"line":15,"column":15},"end":{"line":15,"column":29}}],"line":15},"9":{"loc":{"start":{"line":17,"column":4},"end":{"line":17,"column":131}},"type":"if","locations":[{"start":{"line":17,"column":4},"end":{"line":17,"column":131}},{"start":{"line":17,"column":4},"end":{"line":17,"column":131}}],"line":17},"10":{"loc":{"start":{"line":17,"column":40},"end":{"line":17,"column":131}},"type":"if","locations":[{"start":{"line":17,"column":40},"end":{"line":17,"column":131}},{"start":{"line":17,"column":40},"end":{"line":17,"column":131}}],"line":17},"11":{"loc":{"start":{"line":17,"column":44},"end":{"line":17,"column":97}},"type":"binary-expr","locations":[{"start":{"line":17,"column":44},"end":{"line":17,"column":59}},{"start":{"line":17,"column":63},"end":{"line":17,"column":97}}],"line":17}},"s":{"0":1,"1":64,"2":64,"3":64,"4":2,"5":0,"6":0,"7":0,"8":1,"9":1,"10":0,"11":1,"12":1,"13":0,"14":1,"15":1,"16":1,"17":64,"18":64,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1},"f":{"0":64,"1":2,"2":0,"3":1,"4":0,"5":1,"6":1,"7":1},"b":{"0":[1,1,1],"1":[1,0],"2":[64,0],"3":[0,0],"4":[1,1,1],"5":[1,0],"6":[1,1,1],"7":[0,1],"8":[1,1],"9":[1,0],"10":[64,0],"11":[64,64]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chacha.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chacha.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,SAAgB,aAAa,CAAC,GAAW,EAAE,EAAU,EAAE,IAAY;IAC/D,MAAM,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,UAAiB,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACjE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAHD,sCAGC;AAED,SAAgB,aAAa,CAAC,GAAW,EAAE,EAAU,EAAE,MAAc;IACjE,MAAM,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,UAAiB,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACrE,OAAO,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AACnC,CAAC;AAHD,sCAGC","sourcesContent":["import * as crypto from \"crypto\";\n\nexport function chachaEncrypt(key: Buffer, iv: Buffer, data: Buffer): Buffer {\n    const cipher = crypto.createCipheriv(\"chacha20\" as any, key, iv);\n    return cipher.update(data);\n}\n\nexport function chachaDecrypt(key: Buffer, iv: Buffer, cipher: Buffer): Buffer {\n    const decipher = crypto.createDecipheriv(\"chacha20\" as any, key, iv);\n    return decipher.update(cipher);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cb5172cd824db8d234ed48387913f733808a9bd8"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chachapoly.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chachapoly.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":19,"column":19},"end":{"line":19,"column":100}},"6":{"start":{"line":20,"column":4},"end":{"line":20,"column":33}},"7":{"start":{"line":21,"column":16},"end":{"line":21,"column":40}},"8":{"start":{"line":22,"column":4},"end":{"line":22,"column":19}},"9":{"start":{"line":23,"column":16},"end":{"line":23,"column":35}},"10":{"start":{"line":24,"column":4},"end":{"line":24,"column":37}},"11":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}},"12":{"start":{"line":38,"column":21},"end":{"line":40,"column":6}},"13":{"start":{"line":41,"column":4},"end":{"line":41,"column":35}},"14":{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},"15":{"start":{"line":43,"column":8},"end":{"line":43,"column":40}},"16":{"start":{"line":44,"column":8},"end":{"line":44,"column":32}},"17":{"start":{"line":46,"column":4},"end":{"line":54,"column":5}},"18":{"start":{"line":47,"column":20},"end":{"line":47,"column":60}},"19":{"start":{"line":48,"column":20},"end":{"line":48,"column":63}},"20":{"start":{"line":49,"column":8},"end":{"line":49,"column":33}},"21":{"start":{"line":50,"column":16},"end":{"line":50,"column":36}},"22":{"start":{"line":51,"column":18},"end":{"line":51,"column":34}},"23":{"start":{"line":52,"column":8},"end":{"line":52,"column":34}},"24":{"start":{"line":53,"column":8},"end":{"line":53,"column":17}},"25":{"start":{"line":56,"column":0},"end":{"line":56,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"ccpEncrypt","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":19}},"loc":{"start":{"line":18,"column":41},"end":{"line":25,"column":1}},"line":18},"2":{"name":"ccpDecrypt","decl":{"start":{"line":37,"column":9},"end":{"line":37,"column":19}},"loc":{"start":{"line":37,"column":42},"end":{"line":55,"column":1}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":45,"column":5}},{"start":{"line":42,"column":4},"end":{"line":45,"column":5}}],"line":42},"4":{"loc":{"start":{"line":46,"column":4},"end":{"line":54,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":54,"column":5}},{"start":{"line":46,"column":4},"end":{"line":54,"column":5}}],"line":46}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":3,"6":3,"7":3,"8":3,"9":3,"10":3,"11":1,"12":3,"13":3,"14":3,"15":2,"16":2,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":1,"1":3,"2":3},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[2,1],"4":[1,0]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chachapoly.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/chachapoly.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B;;;;;;;;;GASG;AACH,SAAgB,UAAU,CAAC,CAAS,EAAE,CAAS,EAAE,EAAU,EAAE,SAAiB;IAC1E,MAAM,MAAM,GAAG,gBAAM,CAAC,cAAc,CAAC,mBAA0B,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9F,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAC7B,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IACrC,MAAM,CAAC,KAAK,EAAE,CAAC;IACf,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;IAChC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACrC,CAAC;AAPD,gCAOC;AAED;;;;;;;;;GASG;AACH,SAAgB,UAAU,CAAC,CAAS,EAAE,CAAS,EAAE,EAAU,EAAE,UAAkB;IAC3E,MAAM,QAAQ,GAAG,gBAAM,CAAC,gBAAgB,CAAC,mBAA0B,EAAE,CAAC,EAAE,CAAC,EAAE;QACvE,aAAa,EAAE,EAAE;KACpB,CAAC,CAAC;IACH,QAAQ,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAE/B,IAAI,UAAU,CAAC,MAAM,KAAK,EAAE,EAAE;QAC1B,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QAChC,OAAO,QAAQ,CAAC,KAAK,EAAE,CAAC;KAC3B;IACD,IAAI,UAAU,CAAC,MAAM,GAAG,EAAE,EAAE;QACxB,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QACrD,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC;QACxD,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC;QAC3B,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1B,OAAO,CAAC,CAAC;KACZ;AACL,CAAC;AAnBD,gCAmBC","sourcesContent":["import crypto from \"crypto\";\n\n/**\n * Encrypt data using authenticated encryption with associated data (AEAD)\n * ChaCha20-Poly1305.\n *\n * @param k private key, 64-bytes\n * @param n nonce, 12-bytes\n * @param ad associated data\n * @param plaintext raw data to encrypt\n * @returns encrypted data + tag as a variable length buffer\n */\nexport function ccpEncrypt(k: Buffer, n: Buffer, ad: Buffer, plaintext: Buffer): Buffer {\n    const cipher = crypto.createCipheriv(\"ChaCha20-Poly1305\" as any, k, n, { authTagLength: 16 });\n    cipher.setAAD(ad, undefined);\n    const pad = cipher.update(plaintext);\n    cipher.final();\n    const tag = cipher.getAuthTag();\n    return Buffer.concat([pad, tag]);\n}\n\n/**\n * Decrypt data uusing authenticated encryption with associated data (AEAD)\n * ChaCha20-Poly1305\n *\n * @param k private key, 64-bytes\n * @param n nonce, 12-bytes\n * @param ad associated data, variable length\n * @param ciphertext encrypted data to decrypt\n * @returns decrypteed data as a variable length Buffer\n */\nexport function ccpDecrypt(k: Buffer, n: Buffer, ad: Buffer, ciphertext: Buffer) {\n    const decipher = crypto.createDecipheriv(\"ChaCha20-Poly1305\" as any, k, n, {\n        authTagLength: 16,\n    });\n    decipher.setAAD(ad, undefined);\n\n    if (ciphertext.length === 16) {\n        decipher.setAuthTag(ciphertext);\n        return decipher.final();\n    }\n    if (ciphertext.length > 16) {\n        const tag = ciphertext.slice(ciphertext.length - 16);\n        const pad = ciphertext.slice(0, ciphertext.length - 16);\n        decipher.setAuthTag(tag);\n        let m = decipher.update(pad);\n        const f = decipher.final();\n        m = Buffer.concat([m, f]);\n        return m;\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d25f5a10f02a0e306e0d81f711691d5881138712"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/hkdf.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/hkdf.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":22}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":27,"column":16},"end":{"line":27,"column":41}},"6":{"start":{"line":29,"column":14},"end":{"line":29,"column":45}},"7":{"start":{"line":34,"column":4},"end":{"line":35,"column":57}},"8":{"start":{"line":35,"column":8},"end":{"line":35,"column":57}},"9":{"start":{"line":36,"column":14},"end":{"line":36,"column":31}},"10":{"start":{"line":37,"column":4},"end":{"line":41,"column":5}},"11":{"start":{"line":37,"column":17},"end":{"line":37,"column":18}},"12":{"start":{"line":38,"column":19},"end":{"line":38,"column":34}},"13":{"start":{"line":39,"column":19},"end":{"line":39,"column":35}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":67}},"15":{"start":{"line":42,"column":4},"end":{"line":42,"column":51}},"16":{"start":{"line":44,"column":0},"end":{"line":44,"column":20}},"17":{"start":{"line":46,"column":17},"end":{"line":46,"column":55}},"18":{"start":{"line":47,"column":4},"end":{"line":47,"column":23}},"19":{"start":{"line":48,"column":4},"end":{"line":48,"column":25}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"hkdf","decl":{"start":{"line":25,"column":9},"end":{"line":25,"column":13}},"loc":{"start":{"line":25,"column":89},"end":{"line":43,"column":1}},"line":25},"2":{"name":"hmacHash","decl":{"start":{"line":45,"column":9},"end":{"line":45,"column":17}},"loc":{"start":{"line":45,"column":36},"end":{"line":49,"column":1}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":25,"column":24},"end":{"line":25,"column":46}},"type":"default-arg","locations":[{"start":{"line":25,"column":31},"end":{"line":25,"column":46}}],"line":25},"4":{"loc":{"start":{"line":25,"column":48},"end":{"line":25,"column":70}},"type":"default-arg","locations":[{"start":{"line":25,"column":55},"end":{"line":25,"column":70}}],"line":25},"5":{"loc":{"start":{"line":25,"column":72},"end":{"line":25,"column":87}},"type":"default-arg","locations":[{"start":{"line":25,"column":79},"end":{"line":25,"column":87}}],"line":25},"6":{"loc":{"start":{"line":34,"column":4},"end":{"line":35,"column":57}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":35,"column":57}},{"start":{"line":34,"column":4},"end":{"line":35,"column":57}}],"line":34}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":12,"6":12,"7":12,"8":1,"9":11,"10":11,"11":11,"12":27,"13":27,"14":27,"15":11,"16":1,"17":39,"18":39,"19":39},"f":{"0":1,"1":12,"2":39},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1],"4":[7],"5":[7],"6":[1,11]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/hkdf.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/hkdf.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B;;;;;;;;;;;;;;;;GAgBG;AACH,SAAgB,IAAI,CAChB,GAAW,EACX,GAAW,EACX,OAAe,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAC9B,OAAe,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAC9B,OAAe,QAAQ;IAEvB,eAAe;IACf,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAEtC,SAAS;IACT,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC;IAE1C,uDAAuD;IACvD,uDAAuD;IACvD,8DAA8D;IAC9D,mEAAmE;IACnE,IAAI,CAAC,GAAG,GAAG;QAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;IAE9D,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACzB,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3B,MAAM,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5B,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;KAC9D;IACD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC;AA1BD,oBA0BC;AAED,SAAS,QAAQ,CAAC,GAAW,EAAE,KAAa,EAAE,IAAY;IACtD,MAAM,IAAI,GAAG,gBAAM,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC1C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACnB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;AACzB,CAAC","sourcesContent":["import crypto from \"crypto\";\n\n/**\n * HMAC-based Extact and Expand Key Derivation Function (HKDF)\n * that complies with RFC 5869.\n *\n * @remarks\n * Refer to https://tools.ietf.org/html/rfc5869 for detailed information.\n *\n * The current implementation only supports up to 254 expansion rounds for\n * a total of 255 rounds.\n *\n * @param ikm initial key material, variable length\n * @param len output key material length\n * @param salt optional, defaults to none\n * @param info optional, defaults to none\n * @param hash optional, defaults to sha256\n * @returns output key material of specified length\n */\nexport function hkdf(\n    ikm: Buffer,\n    len: number,\n    salt: Buffer = Buffer.alloc(0),\n    info: Buffer = Buffer.alloc(0),\n    hash: string = \"sha256\",\n) {\n    // extract step\n    const prk = hmacHash(salt, ikm, hash);\n\n    // expand\n    const n = Math.ceil(len / prk.byteLength);\n\n    // validate we don't overflow iteration counter buffer.\n    // Note that we can support larger values but will need\n    // to modify how the integer byte is constructed, additionally\n    // the specification does not specify the endianness of the counter\n    if (n > 255) throw new Error(\"Output length exceeds maximum\");\n\n    const t = [Buffer.alloc(0)];\n    for (let i = 1; i <= n; i++) {\n        const tp = t[t.length - 1];\n        const bi = Buffer.from([i]);\n        t.push(hmacHash(prk, Buffer.concat([tp, info, bi]), hash));\n    }\n    return Buffer.concat(t.slice(1)).slice(0, len);\n}\n\nfunction hmacHash(key: Buffer, input: Buffer, hash: string) {\n    const hmac = crypto.createHmac(hash, key);\n    hmac.update(input);\n    return hmac.digest();\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"be52cf70b95304833a7c50530e1a89e1fa952677"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/key.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/key.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":135}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":8,"column":20},"end":{"line":8,"column":73}},"6":{"start":{"line":19,"column":4},"end":{"line":24,"column":5}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":61}},"8":{"start":{"line":23,"column":8},"end":{"line":23,"column":21}},"9":{"start":{"line":26,"column":0},"end":{"line":26,"column":42}},"10":{"start":{"line":34,"column":4},"end":{"line":39,"column":5}},"11":{"start":{"line":35,"column":8},"end":{"line":35,"column":59}},"12":{"start":{"line":38,"column":8},"end":{"line":38,"column":21}},"13":{"start":{"line":41,"column":0},"end":{"line":41,"column":40}},"14":{"start":{"line":54,"column":4},"end":{"line":56,"column":39}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":50}},"16":{"start":{"line":57,"column":4},"end":{"line":57,"column":18}},"17":{"start":{"line":59,"column":0},"end":{"line":59,"column":44}},"18":{"start":{"line":69,"column":4},"end":{"line":69,"column":81}},"19":{"start":{"line":71,"column":0},"end":{"line":71,"column":36}},"20":{"start":{"line":80,"column":4},"end":{"line":80,"column":81}},"21":{"start":{"line":82,"column":0},"end":{"line":82,"column":44}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"validPrivateKey","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":24}},"loc":{"start":{"line":18,"column":34},"end":{"line":25,"column":1}},"line":18},"2":{"name":"validPublicKey","decl":{"start":{"line":33,"column":9},"end":{"line":33,"column":23}},"loc":{"start":{"line":33,"column":32},"end":{"line":40,"column":1}},"line":33},"3":{"name":"createPrivateKey","decl":{"start":{"line":52,"column":9},"end":{"line":52,"column":25}},"loc":{"start":{"line":52,"column":28},"end":{"line":58,"column":1}},"line":52},"4":{"name":"getPublicKey","decl":{"start":{"line":68,"column":9},"end":{"line":68,"column":21}},"loc":{"start":{"line":68,"column":50},"end":{"line":70,"column":1}},"line":68},"5":{"name":"convertPublicKey","decl":{"start":{"line":79,"column":9},"end":{"line":79,"column":25}},"loc":{"start":{"line":79,"column":53},"end":{"line":81,"column":1}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":68,"column":31},"end":{"line":68,"column":48}},"type":"default-arg","locations":[{"start":{"line":68,"column":44},"end":{"line":68,"column":48}}],"line":68},"4":{"loc":{"start":{"line":79,"column":34},"end":{"line":79,"column":51}},"type":"default-arg","locations":[{"start":{"line":79,"column":47},"end":{"line":79,"column":51}}],"line":79}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":7,"7":7,"8":0,"9":1,"10":6,"11":6,"12":0,"13":1,"14":1,"15":1,"16":1,"17":1,"18":17,"19":1,"20":4,"21":1},"f":{"0":2,"1":7,"2":6,"3":1,"4":17,"5":4},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[5],"4":[0]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/key.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/key.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAC5B,0EAAkD;AAElD,wCAAwC;AACxC,sGAAsG;AAEtG;;;;;;GAMG;AACH,SAAgB,eAAe,CAAC,OAAe;IAC3C,IAAI;QACA,OAAO,mBAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;KAC9C;IAAC,OAAO,EAAE,EAAE;QACT,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AAND,0CAMC;AAED;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,MAAc;IACzC,IAAI;QACA,OAAO,mBAAS,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;KAC5C;IAAC,OAAO,EAAE,EAAE;QACT,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AAND,wCAMC;AAED;;;;;;;;;GASG;AACH,SAAgB,gBAAgB;IAC5B,IAAI,MAAc,CAAC;IACnB,GAAG;QACC,MAAM,GAAG,gBAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;KACnC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE;IACnC,OAAO,MAAM,CAAC;AAClB,CAAC;AAND,4CAMC;AAED;;;;;;;GAOG;AACH,SAAgB,YAAY,CAAC,OAAe,EAAE,UAAU,GAAG,IAAI;IAC3D,OAAO,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,CAAC;AAFD,oCAEC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,MAAc,EAAE,aAAsB,IAAI;IACvE,OAAO,MAAM,CAAC,IAAI,CAAC,mBAAS,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;AACvE,CAAC;AAFD,4CAEC","sourcesContent":["import crypto from \"crypto\";\nimport secp256k1 from \"@node-lightning/secp256k1\";\n\n// const minPrivateKey = BigInt(\"0x01\");\n// const maxPrivateKey = BigInt(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140\");\n\n/**\n * Returns true when the Buffer represents a 256-bit number that is between\n * 0x1 and 0xffffffffffffffffffffffffffffffffbaaedce6af48a03bbfd25e8cd0364140\n * as documented in https://en.bitcoin.it/wiki/Private_key\n *\n * @param privKey 32-byte/256-bit buffer\n */\nexport function validPrivateKey(privKey: Buffer): boolean {\n    try {\n        return secp256k1.privateKeyVerify(privKey);\n    } catch (ex) {\n        return false;\n    }\n}\n\n/**\n * Returns true when the Buffer represents a valid SEC encoded public\n * key stored in a buffer. This expects the prefix and length to be\n * correct.\n * @param pubkey\n */\nexport function validPublicKey(pubkey: Buffer): boolean {\n    try {\n        return secp256k1.publicKeyVerify(pubkey);\n    } catch (ex) {\n        return false;\n    }\n}\n\n/**\n * Generates a cryptographially secure 256-bit private key\n * that is valid for elliptic curve secp256k1\n *\n * @remarks This method uses crypto.randomBytes to\n * generate the random value. It may be better to use a\n * HRBG\n *\n * @returns the 32-byte/256-bit private key\n */\nexport function createPrivateKey(): Buffer {\n    let result: Buffer;\n    do {\n        result = crypto.randomBytes(32);\n    } while (!validPrivateKey(result));\n    return result;\n}\n\n/**\n * Gets the public key in the ellitic curve secp256k1\n * from the provided private key\n *\n * @param privKey 32-byte/256-bit private key\n * @returns 33-byte buffer for compressed,\n * 65-byte buffer for uncompressed\n */\nexport function getPublicKey(privKey: Buffer, compressed = true): Buffer {\n    return Buffer.from(secp256k1.publicKeyCreate(privKey, compressed));\n}\n\n/**\n * Converts a public key between compressed and uncompressed format. If\n * the for\n * @param pubkey 33- or 65-byte buffer\n * @param compressed true when it should return 33-byte compressed public key\n * @returns\n */\nexport function convertPublicKey(pubkey: Buffer, compressed: boolean = true): Buffer {\n    return Buffer.from(secp256k1.publicKeyConvert(pubkey, compressed));\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08fa62f7bf78706dbcf7508882a06d0f4b0abc7d"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/pbkdf2.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/pbkdf2.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":45}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":9,"column":4},"end":{"line":16,"column":7}},"6":{"start":{"line":10,"column":8},"end":{"line":15,"column":11}},"7":{"start":{"line":11,"column":12},"end":{"line":14,"column":32}},"8":{"start":{"line":12,"column":16},"end":{"line":12,"column":28}},"9":{"start":{"line":14,"column":16},"end":{"line":14,"column":32}},"10":{"start":{"line":18,"column":0},"end":{"line":18,"column":24}},"11":{"start":{"line":20,"column":4},"end":{"line":20,"column":81}},"12":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"pbkdf2","decl":{"start":{"line":8,"column":9},"end":{"line":8,"column":15}},"loc":{"start":{"line":8,"column":58},"end":{"line":17,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":23},"end":{"line":9,"column":24}},"loc":{"start":{"line":9,"column":44},"end":{"line":16,"column":5}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":10,"column":74},"end":{"line":10,"column":75}},"loc":{"start":{"line":10,"column":91},"end":{"line":15,"column":9}},"line":10},"4":{"name":"pbkdf2Sync","decl":{"start":{"line":19,"column":9},"end":{"line":19,"column":19}},"loc":{"start":{"line":19,"column":62},"end":{"line":21,"column":1}},"line":19}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":11,"column":12},"end":{"line":14,"column":32}},"type":"if","locations":[{"start":{"line":11,"column":12},"end":{"line":14,"column":32}},{"start":{"line":11,"column":12},"end":{"line":14,"column":32}}],"line":11}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":2,"6":2,"7":2,"8":0,"9":2,"10":1,"11":0,"12":1},"f":{"0":1,"1":2,"2":2,"3":2,"4":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,2]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/pbkdf2.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/pbkdf2.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,SAAgB,MAAM,CAClB,QAAgB,EAChB,IAAY,EACZ,UAAkB,EAClB,MAAc,EACd,IAAY;IAEZ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,gBAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YACpE,IAAI,GAAG;gBAAE,MAAM,CAAC,GAAG,CAAC,CAAC;;gBAChB,OAAO,CAAC,MAAM,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC;AAbD,wBAaC;AAED,SAAgB,UAAU,CACtB,QAAgB,EAChB,IAAY,EACZ,UAAkB,EAClB,MAAc,EACd,IAAY;IAEZ,OAAO,gBAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;AACvE,CAAC;AARD,gCAQC","sourcesContent":["import crypto from \"crypto\";\n\nexport function pbkdf2(\n    password: Buffer,\n    salt: Buffer,\n    iterations: number,\n    keylen: number,\n    hmac: string,\n): Promise<Buffer> {\n    return new Promise((resolve, reject) => {\n        crypto.pbkdf2(password, salt, iterations, keylen, hmac, (err, result) => {\n            if (err) reject(err);\n            else resolve(result);\n        });\n    });\n}\n\nexport function pbkdf2Sync(\n    password: Buffer,\n    salt: Buffer,\n    iterations: number,\n    keylen: number,\n    hmac: string,\n): Buffer {\n    return crypto.pbkdf2Sync(password, salt, iterations, keylen, hmac);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09703cd95e1d99863a77e84a30345a4aab4a028d"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/secp256k1.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/secp256k1.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":311}},"4":{"start":{"line":7,"column":20},"end":{"line":7,"column":73}},"5":{"start":{"line":19,"column":4},"end":{"line":19,"column":72}},"6":{"start":{"line":21,"column":0},"end":{"line":21,"column":20}},"7":{"start":{"line":30,"column":4},"end":{"line":30,"column":91}},"8":{"start":{"line":32,"column":0},"end":{"line":32,"column":38}},"9":{"start":{"line":42,"column":26},"end":{"line":42,"column":72}},"10":{"start":{"line":43,"column":4},"end":{"line":43,"column":54}},"11":{"start":{"line":44,"column":4},"end":{"line":44,"column":34}},"12":{"start":{"line":46,"column":0},"end":{"line":46,"column":20}},"13":{"start":{"line":56,"column":33},"end":{"line":56,"column":79}},"14":{"start":{"line":57,"column":4},"end":{"line":60,"column":6}},"15":{"start":{"line":62,"column":0},"end":{"line":62,"column":44}},"16":{"start":{"line":69,"column":4},"end":{"line":69,"column":65}},"17":{"start":{"line":71,"column":0},"end":{"line":71,"column":28}},"18":{"start":{"line":82,"column":4},"end":{"line":82,"column":61}},"19":{"start":{"line":84,"column":0},"end":{"line":84,"column":30}},"20":{"start":{"line":90,"column":4},"end":{"line":96,"column":5}},"21":{"start":{"line":91,"column":8},"end":{"line":91,"column":49}},"22":{"start":{"line":92,"column":8},"end":{"line":92,"column":20}},"23":{"start":{"line":95,"column":8},"end":{"line":95,"column":21}},"24":{"start":{"line":98,"column":0},"end":{"line":98,"column":28}},"25":{"start":{"line":108,"column":19},"end":{"line":108,"column":93}},"26":{"start":{"line":109,"column":4},"end":{"line":109,"column":31}},"27":{"start":{"line":111,"column":0},"end":{"line":111,"column":38}},"28":{"start":{"line":122,"column":4},"end":{"line":122,"column":92}},"29":{"start":{"line":124,"column":0},"end":{"line":124,"column":46}},"30":{"start":{"line":135,"column":4},"end":{"line":135,"column":92}},"31":{"start":{"line":137,"column":0},"end":{"line":137,"column":46}},"32":{"start":{"line":146,"column":4},"end":{"line":146,"column":82}},"33":{"start":{"line":148,"column":0},"end":{"line":148,"column":44}},"34":{"start":{"line":156,"column":4},"end":{"line":156,"column":95}},"35":{"start":{"line":158,"column":0},"end":{"line":158,"column":48}},"36":{"start":{"line":166,"column":4},"end":{"line":166,"column":95}},"37":{"start":{"line":168,"column":0},"end":{"line":168,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"ecdh","decl":{"start":{"line":18,"column":9},"end":{"line":18,"column":13}},"loc":{"start":{"line":18,"column":37},"end":{"line":20,"column":1}},"line":18},"2":{"name":"privateKeyMul","decl":{"start":{"line":29,"column":9},"end":{"line":29,"column":22}},"loc":{"start":{"line":29,"column":38},"end":{"line":31,"column":1}},"line":29},"3":{"name":"sign","decl":{"start":{"line":41,"column":9},"end":{"line":41,"column":13}},"loc":{"start":{"line":41,"column":31},"end":{"line":45,"column":1}},"line":41},"4":{"name":"signWithRecovery","decl":{"start":{"line":55,"column":9},"end":{"line":55,"column":25}},"loc":{"start":{"line":55,"column":43},"end":{"line":61,"column":1}},"line":55},"5":{"name":"sigToDER","decl":{"start":{"line":68,"column":9},"end":{"line":68,"column":17}},"loc":{"start":{"line":68,"column":23},"end":{"line":70,"column":1}},"line":68},"6":{"name":"verifySig","decl":{"start":{"line":81,"column":9},"end":{"line":81,"column":18}},"loc":{"start":{"line":81,"column":37},"end":{"line":83,"column":1}},"line":81},"7":{"name":"isDERSig","decl":{"start":{"line":89,"column":9},"end":{"line":89,"column":17}},"loc":{"start":{"line":89,"column":23},"end":{"line":97,"column":1}},"line":89},"8":{"name":"recoverPubKey","decl":{"start":{"line":107,"column":9},"end":{"line":107,"column":22}},"loc":{"start":{"line":107,"column":72},"end":{"line":110,"column":1}},"line":107},"9":{"name":"publicKeyTweakAdd","decl":{"start":{"line":121,"column":9},"end":{"line":121,"column":26}},"loc":{"start":{"line":121,"column":64},"end":{"line":123,"column":1}},"line":121},"10":{"name":"publicKeyTweakMul","decl":{"start":{"line":134,"column":9},"end":{"line":134,"column":26}},"loc":{"start":{"line":134,"column":64},"end":{"line":136,"column":1}},"line":134},"11":{"name":"publicKeyCombine","decl":{"start":{"line":145,"column":9},"end":{"line":145,"column":25}},"loc":{"start":{"line":145,"column":54},"end":{"line":147,"column":1}},"line":145},"12":{"name":"privateKeyTweakAdd","decl":{"start":{"line":155,"column":9},"end":{"line":155,"column":27}},"loc":{"start":{"line":155,"column":47},"end":{"line":157,"column":1}},"line":155},"13":{"name":"privateKeyTweakMul","decl":{"start":{"line":165,"column":9},"end":{"line":165,"column":27}},"loc":{"start":{"line":165,"column":47},"end":{"line":167,"column":1}},"line":165}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":107,"column":53},"end":{"line":107,"column":70}},"type":"default-arg","locations":[{"start":{"line":107,"column":66},"end":{"line":107,"column":70}}],"line":107},"4":{"loc":{"start":{"line":121,"column":45},"end":{"line":121,"column":62}},"type":"default-arg","locations":[{"start":{"line":121,"column":58},"end":{"line":121,"column":62}}],"line":121},"5":{"loc":{"start":{"line":134,"column":45},"end":{"line":134,"column":62}},"type":"default-arg","locations":[{"start":{"line":134,"column":58},"end":{"line":134,"column":62}}],"line":134},"6":{"loc":{"start":{"line":145,"column":35},"end":{"line":145,"column":52}},"type":"default-arg","locations":[{"start":{"line":145,"column":48},"end":{"line":145,"column":52}}],"line":145}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":2,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":1,"16":1,"17":1,"18":1,"19":1,"20":2,"21":2,"22":1,"23":1,"24":1,"25":0,"26":0,"27":1,"28":2,"29":1,"30":2,"31":1,"32":2,"33":1,"34":2,"35":1,"36":2,"37":1},"f":{"0":1,"1":2,"2":1,"3":1,"4":0,"5":1,"6":1,"7":2,"8":0,"9":2,"10":2,"11":2,"12":2,"13":2},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[0],"4":[2],"5":[2],"6":[0]},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/secp256k1.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/secp256k1.ts"],"names":[],"mappings":"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","sourcesContent":["import secp256k1 from \"@node-lightning/secp256k1\";\n\n/**\n * Elliptic Curve Diffie-Helman on secp256k1 takes a\n * public key and point multiplies it by the private key.\n * The resulting compressed public key value is hashed via\n * sha256.\n *\n * @param publicKey 33-byte compressed public key\n * @param privateKey  32-byte private key\n * @returns 32-byte sha256 of the point multiple\n */\nexport function ecdh(publicKey: Buffer, privateKey: Buffer): Buffer {\n    return Buffer.from(secp256k1.ecdh(publicKey, privateKey));\n}\n\n/**\n * Performs modular multiplication on the secret value by multiplying by the\n * tweak value\n * @param secret 32-byte secret\n * @param tweak 32-byte tweak\n * @returns 32-byte secret\n */\nexport function privateKeyMul(secret: Buffer, tweak: Buffer): Buffer {\n    return Buffer.from(secp256k1.privateKeyTweakMul(Buffer.from(secret), tweak));\n}\n\n/**\n * Create an ECDSA signature for the 32-byte message using the private\n * key. This method returns the normalized low-s version of the signature\n * as a 64-byte Buffer (r,s) values.\n * @param msg 32-byte message\n * @param privateKey 32-byte secp256k1 private key\n * @returns signatures as 64-byte buffer with (r,s) pair\n */\nexport function sign(msg: Buffer, privateKey: Buffer): Buffer {\n    const { signature } = secp256k1.ecdsaSign(msg, privateKey);\n    secp256k1.signatureNormalize(signature);\n    return Buffer.from(signature);\n}\n\n/**\n * Create an ECDSA signature for the 32-byte message using the private\n * key. This method returns both the signature in the normalized low-s\n * version of the signature as a 64-bte Buffer (r,s) and the recovery\n * identifier.\n * @param msg 32-byte message\n * @param privateKey 32-byte secp256k1 private key\n */\nexport function signWithRecovery(\n    msg: Buffer,\n    privateKey: Buffer,\n): { signature: Buffer; recovery: number } {\n    const { signature, recid } = secp256k1.ecdsaSign(msg, privateKey);\n    return {\n        signature: Buffer.from(signature),\n        recovery: recid,\n    };\n}\n\n/**\n * Encodes a signature into a DER encoding. This encoding is 8-73 bytes\n * in length depending on the length of the s value in the signature.\n * @param sig 64-byte buffer containing (r, s)\n */\nexport function sigToDER(sig: Buffer): Buffer {\n    return Buffer.from(secp256k1.signatureExport(sig));\n}\n\n/**\n * Verifies an ECDSA signature and returns true or false\n * if the signatures is valid.\n *\n * @param msg 32-byte message (256 hash or message)\n * @param sig 64-byte\n * @param pubkey 33-byte compressed pubkey\n * @returns true when signature is valid\n */\nexport function verifySig(msg: Buffer, sig: Buffer, pubkey: Buffer): boolean {\n    return secp256k1.ecdsaVerify(sig, msg, pubkey);\n}\n\n/**\n * Returns true if the signature is a DER encoded signature\n * @param sig a DER encoded signature\n */\nexport function isDERSig(sig: Buffer): boolean {\n    try {\n        secp256k1.signatureImport(sig);\n        return true;\n    } catch (ex) {\n        return false;\n    }\n}\n\n/**\n * Recovers the public key from the signature and recovery identifier\n * for the signed message.\n * @param signature 64-byte signature\n * @param recovery recovery id\n * @param message message that was signed\n * @param compressed whether the pubkey is compressed\n */\nexport function recoverPubKey(\n    signature: Buffer,\n    recovery: number,\n    message: Buffer,\n    compressed: boolean = true,\n): Buffer {\n    const result = secp256k1.ecdsaRecover(signature, recovery, message, compressed);\n    return Buffer.from(result);\n}\n\n/**\n * Tweaks a public key by adding tweak * G to the point. The equation is\n * T = P + t*G\n *\n * @param publicKey 33-byte or 65-byte public key\n * @param tweak 32-byte scalar value that is multiplied by G\n * @param compressed true to compress the resulting point\n * @returns the 33-byte compressed or 65-byte uncompressed public key point\n */\nexport function publicKeyTweakAdd(publicKey: Buffer, tweak: Buffer, compressed: boolean = true) {\n    return Buffer.from(secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed));\n}\n\n/**\n * Tweaks a public key by multiplying it against a scalar. The equation is\n * T = P * t\n *\n * @param publicKey 33-byte or 65-byte public key\n * @param tweak 32-byte tweak to multiply against the public key\n * @param compressed true to compress the resulting point\n * @returns the 33-byte compressed or 65-byte uncompressed public key point\n */\nexport function publicKeyTweakMul(publicKey: Buffer, tweak: Buffer, compressed: boolean = true) {\n    return Buffer.from(secp256k1.publicKeyTweakMul(publicKey, tweak, compressed));\n}\n\n/**\n * Performs point addition\n *\n * @param pubkeys list of 33-byte or 65-byte public keys\n * @param compressed true to compress the resulting point\n * @returns the 33-byte compressed or 65-byte uncompressed public key point\n */\nexport function publicKeyCombine(pubkeys: Buffer[], compressed: boolean = true): Buffer {\n    return Buffer.from(secp256k1.publicKeyCombine(pubkeys, compressed));\n}\n\n/**\n * Tweaks a private key by adding a value to it. The question is: e + t.\n *\n * @param privateKey the 32-byte private key\n * @param tweak a 32-byte tweak\n */\nexport function privateKeyTweakAdd(privateKey: Buffer, tweak: Buffer): Buffer {\n    return Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(privateKey), tweak));\n}\n\n/**\n * Tweaks a private key by multiplying it. The equation is: e * t.\n *\n * @param privateKey the 32-byte private key\n * @param tweak a 32-byte tweak\n */\nexport function privateKeyTweakMul(privateKey: Buffer, tweak: Buffer): Buffer {\n    return Buffer.from(secp256k1.privateKeyTweakMul(Buffer.from(privateKey), tweak));\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"584acc38203e867761143607c63cefc3dc3cf96c"},"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/xor.ts":{"path":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/xor.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":21}},"2":{"start":{"line":10,"column":19},"end":{"line":10,"column":61}},"3":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"4":{"start":{"line":11,"column":17},"end":{"line":11,"column":18}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":32}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":18}},"7":{"start":{"line":16,"column":0},"end":{"line":16,"column":18}}},"fnMap":{"0":{"name":"xor","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":12}},"loc":{"start":{"line":9,"column":19},"end":{"line":15,"column":1}},"line":9}},"branchMap":{},"s":{"0":1,"1":1,"2":4,"3":4,"4":4,"5":6,"6":4,"7":1},"f":{"0":4},"b":{},"inputSourceMap":{"version":3,"file":"/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/xor.ts","sources":["/Users/bmancini/code/altangent/node-lightning/packages/crypto/lib/xor.ts"],"names":[],"mappings":";;;AAAA;;;;GAIG;AACH,SAAgB,GAAG,CAAC,CAAS,EAAE,CAAS;IACpC,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAC1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACpC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3B;IACD,OAAO,MAAM,CAAC;AAClB,CAAC;AAND,kBAMC","sourcesContent":["/**\n * Performs XOR of the two buffers where only the min length will be XOR'd\n * @param a\n * @param b\n */\nexport function xor(a: Buffer, b: Buffer) {\n    const result = Buffer.alloc(Math.min(a.length, b.length));\n    for (let i = 0; i < result.length; i++) {\n        result[i] = a[i] ^ b[i];\n    }\n    return result;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7c3a05260998204b634c520c6ab1acad278bde16"}}