"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ccpDecrypt = exports.ccpEncrypt = void 0;
const crypto_1 = __importDefault(require("crypto"));
/**
 * Encrypt data using authenticated encryption with associated data (AEAD)
 * ChaCha20-Poly1305.
 *
 * @param k private key, 64-bytes
 * @param n nonce, 12-bytes
 * @param ad associated data
 * @param plaintext raw data to encrypt
 * @returns encrypted data + tag as a variable length buffer
 */
function ccpEncrypt(k, n, ad, plaintext) {
    const cipher = crypto_1.default.createCipheriv("ChaCha20-Poly1305", k, n, { authTagLength: 16 });
    cipher.setAAD(ad, undefined);
    const pad = cipher.update(plaintext);
    cipher.final();
    const tag = cipher.getAuthTag();
    return Buffer.concat([pad, tag]);
}
exports.ccpEncrypt = ccpEncrypt;
/**
 * Decrypt data uusing authenticated encryption with associated data (AEAD)
 * ChaCha20-Poly1305
 *
 * @param k private key, 64-bytes
 * @param n nonce, 12-bytes
 * @param ad associated data, variable length
 * @param ciphertext encrypted data to decrypt
 * @returns decrypteed data as a variable length Buffer
 */
function ccpDecrypt(k, n, ad, ciphertext) {
    const decipher = crypto_1.default.createDecipheriv("ChaCha20-Poly1305", k, n, {
        authTagLength: 16,
    });
    decipher.setAAD(ad, undefined);
    if (ciphertext.length === 16) {
        decipher.setAuthTag(ciphertext);
        return decipher.final();
    }
    if (ciphertext.length > 16) {
        const tag = ciphertext.slice(ciphertext.length - 16);
        const pad = ciphertext.slice(0, ciphertext.length - 16);
        decipher.setAuthTag(tag);
        let m = decipher.update(pad);
        const f = decipher.final();
        m = Buffer.concat([m, f]);
        return m;
    }
}
exports.ccpDecrypt = ccpDecrypt;
//# sourceMappingURL=chachapoly.js.map