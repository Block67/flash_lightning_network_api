/// <reference types="node" />
import { Readable } from "stream";
/**
 * Wraps a readable stream and provides utilities to assist with reading values
 * off the stream. If there is an attempt to read past the stream, an exception
 * will thrown.
 */
export declare class StreamReader {
    readonly stream: Readable;
    /**
     * Constructs a new StreamReader from the provided hex string.
     * @param hex
     */
    static fromHex(hex: string): StreamReader;
    /**
     * Constructs a new StreamReader from the provided Buffer
     * @param buf
     */
    static fromBuffer(buf: Buffer): StreamReader;
    constructor(stream: Readable);
    /**
     * Reads a VarInt from Bitcoin which is an unsigned integer from
     * 0 to 2^64-1 occupying 1 to 9 bytes. The first byte indicates the variable
     * length and numbers read in little-endian.
     *  < 0xfd   8-bit number
     *    0xfd:  16-bit LE number (3 bytes consumed)
     *    0xfe:  32-bit LE number (5 bytes consumed)
     *    0xff:  64-bit LE number (9 bytes consumed)
     */
    readVarInt(): bigint;
    /**
     * Reads a BigSize from BOLT specs which is an unsigned integer from
     * 0 to 2^64-1 occupying 1 to 9 bytes. The first byte indicates the variable
     * length and numbers read in big-endian.
     *  < 0xfd   8-bit number
     *    0xfd:  16-bit BE number (3 bytes consumed)
     *    0xfe:  32-bit BE number (5 bytes consumed)
     *    0xff:  64-bit BE number (9 bytes consumed)
     */
    readBigSize(): bigint;
    /**
     * Reads `n` bytes from the stream and returns a Buffer. This function
     * operates in two modes:
     *   1. length is provided
     *   2. length is not provided
     *
     * If the length is provided and the requested bytes are not available
     * on the stream an exception will be thrown.
     *
     * If no length is provided it will return the remaining bytes in the Stream
     * or it will return an empty buffer if all bytes have been read from the
     * stream.
     *
     * @remarks
     * This functionality differs from the standard stream interface. In the
     * event a length is provided, the stream will return the any remaining
     * bytes. This method performs a length check to ensure the full data read
     * occurred to prevent downstream length checks from being required. The
     * stream functionality also returns a null if there is no additional data
     * to be read from the stream.
     * @param n
     */
    readBytes(n?: number): Buffer;
    /**
     * Reads the supplied number of bytes and converts the bytes into a
     * little-endian unsigned integer.
     * @param n
     */
    readUIntLE(n: number): number;
    /**
     * Reads the supplied number of bytes and converts the bytes into a
     * little-endian unsigned integer.
     * @param n
     */
    readUIntBE(n: number): number;
    /**
     * Reads a UInt8 from the stream
     */
    readUInt8(): number;
    /**
     * Reads a UInt16 in little-endian from the stream
     */
    readUInt16LE(): number;
    /**
     * Reads a UInt16 in big-endian from the stream
     */
    readUInt16BE(): number;
    /**
     * Reads a UInt32 in little-endian from the stream
     */
    readUInt32LE(): number;
    /**
     * Reads a UInt32 in big-endian from the stream
     */
    readUInt32BE(): number;
    /**
     * Reads a UInt64 in little-endian from the stream
     */
    readBigUInt64LE(): bigint;
    /**
     * Reads a UInt64 in big-endian from the stream
     */
    readBigUInt64BE(): bigint;
    /**
     * Pushes bytes back on to the stream
     * @param chunk
     */
    unshift(chunk: Buffer): void;
    private _assertLen;
}
