"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordCursor = void 0;
const bech32Util = __importStar(require("./bech32-util"));
class WordCursor {
    constructor(words = []) {
        this.words = words;
        this.position = 0;
    }
    get wordsRemaining() {
        return this.words.length - this.position;
    }
    writeUIntBE(val, wordLen) {
        if (!wordLen)
            throw new Error("wordLen must be provided");
        const words = new Array(wordLen);
        const maxV = (1 << 5) - 1;
        for (let i = wordLen - 1; i >= 0; i--) {
            words[i] = val & maxV;
            val >>= 5;
        }
        this._merge(words);
    }
    writeBytes(buf, pad = true) {
        const words = bech32Util.convertWords(buf, 8, 5, pad);
        this._merge(words);
    }
    readUIntBE(numWords) {
        const words = this.words.slice(this.position, this.position + numWords);
        let val = 0;
        for (const word of words) {
            val <<= 5;
            val |= word;
        }
        this.position += numWords;
        return val;
    }
    readBytes(numWords, pad = false) {
        const words = this.words.slice(this.position, this.position + numWords);
        this.position += numWords;
        return Buffer.from(bech32Util.convertWords(words, 5, 8, pad));
    }
    _merge(words) {
        this.words = this.words.concat(words);
    }
}
exports.WordCursor = WordCursor;
//# sourceMappingURL=word-cursor.js.map