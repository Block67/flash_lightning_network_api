"use strict";
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toTypeString = exports.assertOutput = exports.isCompressed = exports.isUint8Array = exports.assert = void 0;
function assert(cond, msg) {
    if (!cond)
        throw new Error(msg);
}
exports.assert = assert;
function isUint8Array(name, value, length) {
    assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
    if (length !== undefined) {
        if (Array.isArray(length)) {
            const numbers = length.join(", ");
            const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
            assert(length.includes(value.length), msg);
        }
        else {
            const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
            assert(value.length === length, msg);
        }
    }
}
exports.isUint8Array = isUint8Array;
function isCompressed(value) {
    assert(toTypeString(value) === "Boolean", "Expected compressed to be a Boolean");
}
exports.isCompressed = isCompressed;
function assertOutput(output, length) {
    if (output === undefined) {
        output = new Uint8Array(length);
    }
    isUint8Array("output", output, length);
    return output;
}
exports.assertOutput = assertOutput;
function toTypeString(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
}
exports.toTypeString = toTypeString;
//# sourceMappingURL=Utils.js.map